/* generate N sorted, non-duplicate integers in [0, max] */
//about min I am not sure
 int *generate(int n, int min, int max) {
    int i, m, a;    
    int *g = (int *)calloc(n, sizeof(int));
    if (!g) return 0;
	max += abs(min);

    m = 0;
    for (i = 0; i < max; i++) 
	{
        a = random_in_between(0, max - i); //random_in_between is function that generates random number in range
        if (a < n - m) 
		{
            g[m] = i + min;
            m++;
        }
    }
	
    return g;
 }


//magnitude of vector  is it's length
magnitudeOfVector = sqrt(myVector.x*myVector.x + myVector.y*myVector.y)

// to make it norrmalized you need to devide each part on magnitude
myNormalizedVector = new Vector2(myVector.x/magnitudeOfVector, myVector.y/magnitudeOfVector);



you can declare own operators inside struct!!!

struct vec2 {
    int x;
    int y;
    vec2 operator + (vec2 const &secVec) {
         return new vec2(x + secvec.x, y + secVec.y);
    }
}



Operators that can be overloaded:
Binary Arithmetic     ->     +, -, *, /, %
Unary Arithmetic     ->     +, -, ++, —
Assignment     ->     =, +=,*=, /=,-=, %=
Bit- wise      ->     & , | , << , >> , ~ , ^
De-referencing     ->     (->)
Dynamic memory allocation and De-allocation     ->     New, delete 
Subscript     ->     [ ]
Function call     ->     ()
Logical      ->     &,  | |, !
Relational     ->     >, < , = =, <=, >=